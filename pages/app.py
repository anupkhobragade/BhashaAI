import streamlit as st
import requests
import pdfplumber   
from dotenv import load_dotenv
import os
from utils.groq_api import query_groq

# Load API key
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# Streamlit UI setup
st.set_page_config(page_title="BhashaAI App", layout="wide")

# Sidebar Branding
st.sidebar.image("bhasha_logo.png", width=150)
#st.sidebar.markdown("### Navigation")
#st.sidebar.success("App")  # Just a label, not a radio button

# Page Content
st.markdown("""
<div style='text-align: center;'>
    <h2 style='color: #FF671F; margin-bottom: 0;'>Bhasha AI</h2>
    <p style='color: #046A38; font-weight: bold; font-size: 20px; margin-top: 5px;'>рднрд╛рд░рдд рдХрд╛ рдЕрдкрдирд╛ ChatGPT</p>
</div>
""", unsafe_allow_html=True)
st.markdown("Simplify forms, legal docs, and English content in **your preferred Indian language**.")

# Language selection
language = st.selectbox("ЁЯЧгя╕П Output Language", [
    "Hindi", "Marathi", "Bengali", "Telugu", "Tamil", 
    "Urdu", "Gujarati", "Malayalam", "Kannada", "Odia"
])

# Input method selection
input_method = st.radio("ЁЯУе Choose Input Method", ["Upload PDF", "Paste Text"])

# Function to call Groq API
def query_groq(prompt):
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama3-70b-8192",
        "messages": [
            {"role": "system", "content": f"You are a helpful assistant who explains content in {language}."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 1000
    }
    response = requests.post(url, headers=headers, json=data)
    return response.json()["choices"][0]["message"]["content"]

# Supported Languages Section
with st.expander("ЁЯМР Supported Indian Languages"):
    st.markdown("""
**Bhasha AI currently supports 10 major Indian languages:**

1. **Hindi** тАУ Northern & Central India  
2. **Bengali** тАУ West Bengal, Assam  
3. **Telugu** тАУ Andhra Pradesh, Telangana  
4. **Marathi** тАУ Maharashtra  
5. **Tamil** тАУ Tamil Nadu, Sri Lanka  
6. **Urdu** тАУ Uttar Pradesh, Telangana  
7. **Gujarati** тАУ Gujarat  
8. **Malayalam** тАУ Kerala  
9. **Kannada** тАУ Karnataka  
10. **Odia** тАУ Odisha

Features include:
- ЁЯЧгя╕П Native script support  
- ЁЯз╛ Form simplification  
- ЁЯФБ English тЖФя╕П Indian language translation  
- ЁЯОЩя╕П Voice input/output (coming soon!)
""")

# Extracted or input text
text = ""

# Option 1: PDF Upload
if input_method == "Upload PDF":
    pdf_file = st.file_uploader("Upload a PDF file", type=["pdf"])
    if pdf_file:
        with pdfplumber.open(pdf_file) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text

# Option 2: Paste Text
else:
    text = st.text_area("Paste your content here", height=200)

# Process the text if available
if text.strip():
    if st.button("ЁЯза Explain in " + language):
        with st.spinner(f"Generating simplified explanation in {language}..."):
            language_prompts = {
                "Hindi": "рд╕рд░рд▓ рдФрд░ рдЖрд╕рд╛рди рд╣рд┐рдВрджреА",
                "Marathi": "рд╕реЛрдкреНрдпрд╛ рдЖрдгрд┐ рд╕рдордЬрдгреНрдпрд╛рд╕рд╛рд░рдЦреНрдпрд╛ рдорд░рд╛рдареАрдд",
                "Bengali": "рж╕рж╣ржЬ ржПржмржВ ржмрзЛржзржЧржорзНржп ржмрж╛ржВрж▓рж╛",
                "Telugu": "р░╕р▒Бр░▓р░нр░Вр░Чр░╛ р░Ер░░р▒Нр░ер░ор░пр▒Нр░пр▒З р░др▒Жр░▓р▒Бр░Чр▒Б",
                "Tamil": "роОро│ро┐роорпИропро╛рой рооро▒рпНро▒рпБроорпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│роХрпНроХрпВроЯро┐роп родрооро┐ро┤рпН",
                "Urdu": "╪│╪з╪п█Б ╪з┘И╪▒ ┘В╪з╪и┘Д ┘Б█Б┘Е ╪з╪▒╪п┘И",
                "Gujarati": "рк╕рк░рк│ ркЕркирлЗ рк╕ркоркЬркорк╛ркВ ркЖрк╡ркдрлА ркЧрлБркЬрк░рк╛ркдрлА",
                "Malayalam": "р┤Ор┤│р╡Бр┤кр╡Нр┤кр┤╡р╡Бр┤В р┤ор┤ир┤╕р╡Нр┤╕р┤┐р┤▓р┤╛р┤Хр╡Бр┤ир╡Нр┤ир┤др╡Бр┤ор┤╛р┤п р┤ор┤▓р┤пр┤╛р┤│р┤В",
                "Kannada": "р▓╕р▓░р▓│ р▓ор▓др│Нр▓др│Б р▓Ер▓░р│Нр▓ер▓╡р▓╛р▓Чр│Бр▓╡ р▓Хр▓ир│Нр▓ир▓б",
                "Odia": "рм╕рм╣рмЬ рмУ рммрнБрмЭрм┐рмкрм╛рм░рм┐рммрм╛ рмУрмбрм╝рм┐рмЖ"
            }
            lang_in_prompt = language_prompts.get(language, language)

            prompt = f"""
рддреБрдо рдПрдХ рд╕рд╣рд╛рдпрдХ рдЖрд╣рд╛рдд рдЬреЛ рднрд╛рд░рдд рдХреЗ рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░рддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджреА рдЧрдИ рд╕рд╛рдордЧреНрд░реА рдХреЛ {lang_in_prompt} рдореЗрдВ рд╕рдордЭрд╛рдУ рддрд╛рдХрд┐ рд╕рднреА рд▓реЛрдЧ рдЙрд╕реЗ рдЖрд╕рд╛рдиреА рд╕реЗ рд╕рдордЭ рд╕рдХреЗрдВред

рд╕рд╛рдордЧреНрд░реА:
{text[:3000]}
"""
            try:
                output = query_groq(prompt)
                st.subheader(f"ЁЯФН {language} рдореЗрдВ рд╡реНрдпрд╛рдЦреНрдпрд╛:")
                st.write(output)
            except Exception as e:
                st.error("тЭМ Something went wrong while fetching explanation.")
                st.exception(e)
else:
    st.info("рдХреГрдкрдпрд╛ PDF рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдкреЗрд╕реНрдЯ рдХрд░реЗрдВред")
