import os
import sys
os.environ["STREAMLIT_WATCH_FILE_SYSTEM"] = "false"

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import csv
from datetime import datetime
from io import BytesIO
from fpdf import FPDF
import streamlit as st
import requests
import pdfplumber
from gtts import gTTS

# Fix path issues when deploying

from utils.groq_api import query_groq
from utils.visitor_tracker import log_visit, get_today_count

# Set Streamlit config
st.set_page_config(page_title="BhashaAI", layout="wide")
st.sidebar.image("bhasha_logo.png", width=150)

# Log visitor
log_visit()

# Inject PWA metadata
st.markdown("""
<link rel="manifest" href="/manifest.json">
<link rel="icon" href="/icon-192.png">
<meta name="theme-color" content="#0b5cd1">
<meta name="mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-title" content="BhashaAI">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<link rel="apple-touch-icon" href="/icon-192.png">
""", unsafe_allow_html=True)

# Header
st.markdown("""
<div style='text-align: center;'>
    <h2 style='color: #FF671F;'>Bhasha AI</h2>
    <p style='color: #046A38; font-weight: bold; font-size: 20px;'>рднрд╛рд░рдд рдХрд╛ рдЕрдкрдирд╛ ChatGPT</p>
</div>
""", unsafe_allow_html=True)

st.markdown("Simplify forms, legal docs, and English content in **your preferred Indian language**.")

st.sidebar.markdown(f"ЁЯСБя╕П **Today's Visitors:** {get_today_count()}")

# Language Options
language = st.selectbox("ЁЯЧгя╕П Output Language", [
    "Hindi", "Marathi", "Bengali", "Telugu", "Tamil",
    "Urdu", "Gujarati", "Malayalam", "Kannada", "Odia"
])

input_method = st.radio("ЁЯУе Choose Input Method", ["Upload PDF", "Paste Text"])
text = ""

# Handle Input
if input_method == "Upload PDF":
    pdf_file = st.file_uploader("Upload a PDF file", type=["pdf"])
    if pdf_file:
        try:
            with pdfplumber.open(pdf_file) as pdf:
                for page in pdf.pages:
                    page_text = page.extract_text()
                    if page_text:
                        text += page_text
        except Exception as e:
            st.error("тЪая╕П Error reading PDF.")
            st.exception(e)
else:
    text = st.text_area("Paste your content here", height=200)

# Language prompt map
language_prompts = {
    "Hindi": "рд╕рд░рд▓ рдФрд░ рдЖрд╕рд╛рди рд╣рд┐рдВрджреА",
    "Marathi": "рд╕реЛрдкреНрдпрд╛ рдЖрдгрд┐ рд╕рдордЬрдгреНрдпрд╛рд╕рд╛рд░рдЦреНрдпрд╛ рдорд░рд╛рдареАрдд",
    "Bengali": "рж╕рж╣ржЬ ржПржмржВ ржмрзЛржзржЧржорзНржп ржмрж╛ржВрж▓рж╛",
    "Telugu": "р░╕р▒Бр░▓р░нр░Вр░Чр░╛ р░Ер░░р▒Нр░ер░ор░пр▒Нр░пр▒З р░др▒Жр░▓р▒Бр░Чр▒Б",
    "Tamil": "роОро│ро┐роорпИропро╛рой рооро▒рпНро▒рпБроорпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│роХрпНроХрпВроЯро┐роп родрооро┐ро┤рпН",
    "Urdu": "╪│╪з╪п█Б ╪з┘И╪▒ ┘В╪з╪и┘Д ┘Б█Б┘Е ╪з╪▒╪п┘И",
    "Gujarati": "рк╕рк░рк│ ркЕркирлЗ рк╕ркоркЬркорк╛ркВ ркЖрк╡ркдрлА ркЧрлБркЬрк░рк╛ркдрлА",
    "Malayalam": "р┤Ор┤│р╡Бр┤кр╡Нр┤кр┤╡р╡Бр┤В р┤ор┤ир┤╕р╡Нр┤╕р┤┐р┤▓р┤╛р┤Хр╡Бр┤ир╡Нр┤ир┤др╡Бр┤ор┤╛р┤п р┤ор┤▓р┤пр┤╛р┤│р┤В",
    "Kannada": "р▓╕р▓░р▓│ р▓ор▓др│Нр▓др│Б р▓Ер▓░р│Нр▓ер▓╡р▓╛р▓Чр│Бр▓╡ р▓Хр▓ир│Нр▓ир▓б",
    "Odia": "рм╕рм╣рмЬ рмУ рммрнБрмЭрм┐рмкрм╛рм░рм┐рммрм╛ рмУрмбрм╝рм┐рмЖ"
}

lang_codes = {
    "Hindi": "hi", "Marathi": "mr", "Bengali": "bn", "Telugu": "te", "Tamil": "ta",
    "Urdu": "ur", "Gujarati": "gu", "Malayalam": "ml", "Kannada": "kn", "Odia": "or"
}

# PDF Generator
class UnicodePDF(FPDF):
    def header(self):
        self.set_font("Noto", size=12)

    def footer(self):
        self.set_y(-15)
        self.set_font("Noto", size=8)
        self.cell(0, 10, f"Page {self.page_no()}", align="C")

def generate_pdf(text):
    pdf = UnicodePDF()

    font_path = os.path.join("assets", "NotoSansDevanagari-Regular.ttf")
    if not os.path.exists(font_path):
        raise FileNotFoundError("Font file missing. Please ensure 'NotoSansDevanagari-Regular.ttf' is in the assets/ folder.")

    pdf.add_font("Noto", "", font_path, uni=True)
    pdf.set_font("Noto", size=12)

    pdf.add_page()

    for line in text.split('\n'):
        pdf.multi_cell(0, 10, line)

    output = BytesIO()
    pdf.output(output)
    output.seek(0)
    return output

# Process translation
if text.strip():
    if st.button(f"ЁЯза Explain in {language}"):
        with st.spinner(f"Generating explanation in {language}..."):
            lang_prompt = language_prompts.get(language, language)
            prompt = f"""
рддреБрдо рдПрдХ рд╕рд╣рд╛рдпрдХ рд╣реЛ рдЬреЛ рднрд╛рд░рдд рдХреЗ рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░рддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджреА рдЧрдИ рд╕рд╛рдордЧреНрд░реА рдХреЛ {lang_prompt} рдореЗрдВ рд╕рдордЭрд╛рдУ рддрд╛рдХрд┐ рд╕рднреА рд▓реЛрдЧ рдЙрд╕реЗ рдЖрд╕рд╛рдиреА рд╕реЗ рд╕рдордЭ рд╕рдХреЗрдВред

рд╕рд╛рдордЧреНрд░реА:
{text[:3000]}
"""
            output = query_groq(prompt, language)
            if output:
                st.subheader(f"ЁЯФН {language} рдореЗрдВ рд╡реНрдпрд╛рдЦреНрдпрд╛:")
                st.write(output)

                # Download PDF
                try:
                    pdf_file = generate_pdf(output)
                    st.download_button(
                        label="тмЗя╕П Download as PDF",
                        data=pdf_file,
                        file_name="bhashaai_output.pdf",
                        mime="application/pdf"
                    )
                except Exception as e:
                    st.error("PDF generation failed")
                    st.exception(e)

                # TTS
                try:
                    lang_code = lang_codes.get(language, "hi")
                    tts = gTTS(output, lang=lang_code)
                    audio_bytes = BytesIO()
                    tts.write_to_fp(audio_bytes)
                    audio_bytes.seek(0)
                    st.audio(audio_bytes, format="audio/mp3")
                    st.success("ЁЯОз Voice generated successfully!")
                except Exception as e:
                    st.warning("тЪая╕П Could not generate voice output.")
                    st.exception(e)
else:
    st.info("рдХреГрдкрдпрд╛ PDF рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдкреЗрд╕реНрдЯ рдХрд░реЗрдВред")